Set vs List vs Map in Java

Duplicate Objects
Main difference between List and Set interface in Java is that List allows duplicates while Set doesn't allow duplicates.

Order
Another key difference between List and Set is that List is an ordered collection, List's contract maintains insertion order or element. Set is an unordered collection, you get no guarantee on which order element will be stored.

Null elements
List allows null elements and you can have many null objects in a List, because it also allowed duplicates. Set just allow one null element as there is no duplicate permitted while in Map you can have null values and at most one null key.

When to use List, Set and Map in Java
1) If you need to access elements frequently by using index, than List is a way to go.
2) If you want to store elements and want them to maintain an order on which they are inserted into collection then go for List again.
3) If you want to create collection of unique elements and don't want any duplicate than choose any Set implementation e.g. HashSet, LinkedHashSet or TreeSet. 
4) If you store data in form of key and value than Map is the way to go. You can choose from Hashtable, HashMap, TreeMap.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Arraylist vs Linkedlist

1) Search: ArrayList search operation is pretty fast compared to the LinkedList search operation. get(int index) in ArrayList gives the performance of O(1) while LinkedList performance is O(n).
2) LinkedList element deletion is faster compared to ArrayList.
3) Inserts Performance: LinkedList add method gives O(1) performance while ArrayList gives O(n) in worst case.

When to use LinkedList and when to use ArrayList?

1) As explained above the insert and remove operations give good performance (O(1)) in LinkedList compared to ArrayList(O(n)). Hence if there is a requirement of frequent addition and deletion in application then LinkedList is a best choice.

2) Search (get method) operations are fast in Arraylist (O(1)) but not in LinkedList (O(n)) so If there are less add and remove operations and more search operations requirement, ArrayList would be your best bet.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
What is the Java transient keyword?
Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
What is the Java synchronized keyword?
Synchronized enable a simple strategy for preventing thread interference and memory consistency errors: if an object is visible to more than one thread, all reads or writes to that object's variables are done through synchronized methods.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
What is the Java volatile keyword?

Essentially, volatile is used to indicate that a variable's value will be modified by different threads.

Declaring a volatile Java variable means:

The value of this variable will never be cached thread-locally: all reads and writes will go straight to "main memory";
Access to the variable acts as though it is enclosed in a synchronized block, synchronized on itself.
We say "acts as though" in the second point, because to the programmer at least (and probably in most JVM implementations) there is no actual lock object involved. Here is how synchronized and volatile compare:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Concurrent packages

The Java Concurrency Utilities framework is a library of types that are designed to be used as building blocks for creating concurrent classes or applications. These types are thread-safe, have been thoroughly tested, and offer high performance.

HashMap vs ConcurrentHashMap

1.  Thread -Safe : 
     ConcurrentHashMap is thread-safe that is the code can be accessed by single thread at a time .    
     while HashMap is not thread-safe .

2.  Synchronization Method :
    HashMap can be synchronized by using    
    synchronizedMap(HashMap)  method .  
	By using this method we get a HashMap object which is equivalent 
    to the HashTable object . So every modification  is performed    
    on  Map is locked on Map object.

3.  Null Key
     ConcurrentHashMap does not allow NULL values . So the key can not be null in
     ConcurrentHashMap .While In HashMap there can only be one null key .
	
4.  Performance 

     In multiple threaded environment HashMap is usually faster than ConcurrentHashMap . As    
     only single thread can access the certain portion of the Map and thus reducing the performance . 
     While in HashMap any number of threads can access the code at the same time .